// Generated by data binding compiler. Do not edit!
package com.itsamankrsingh.bankingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import com.itsamankrsingh.bankingapp.R;
import com.itsamankrsingh.bankingapp.database.Customer;
import com.itsamankrsingh.bankingapp.ui.fragment.customer.CustomerItemClickListener;
import de.hdodenhof.circleimageview.CircleImageView;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class CustomerItemBinding extends ViewDataBinding {
  @NonNull
  public final MaterialCardView cardView;

  @NonNull
  public final CircleImageView circularImageView;

  @NonNull
  public final MaterialTextView customerAccountNumberTv;

  @NonNull
  public final MaterialTextView customerNameTv;

  @NonNull
  public final LinearLayout linearLayout;

  @Bindable
  protected Customer mCustomer;

  @Bindable
  protected CustomerItemClickListener mClicklistener;

  protected CustomerItemBinding(Object _bindingComponent, View _root, int _localFieldCount,
      MaterialCardView cardView, CircleImageView circularImageView,
      MaterialTextView customerAccountNumberTv, MaterialTextView customerNameTv,
      LinearLayout linearLayout) {
    super(_bindingComponent, _root, _localFieldCount);
    this.cardView = cardView;
    this.circularImageView = circularImageView;
    this.customerAccountNumberTv = customerAccountNumberTv;
    this.customerNameTv = customerNameTv;
    this.linearLayout = linearLayout;
  }

  public abstract void setCustomer(@Nullable Customer customer);

  @Nullable
  public Customer getCustomer() {
    return mCustomer;
  }

  public abstract void setClicklistener(@Nullable CustomerItemClickListener clicklistener);

  @Nullable
  public CustomerItemClickListener getClicklistener() {
    return mClicklistener;
  }

  @NonNull
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.customer_item, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<CustomerItemBinding>inflateInternal(inflater, R.layout.customer_item, root, attachToRoot, component);
  }

  @NonNull
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.customer_item, null, false, component)
   */
  @NonNull
  @Deprecated
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<CustomerItemBinding>inflateInternal(inflater, R.layout.customer_item, null, false, component);
  }

  public static CustomerItemBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static CustomerItemBinding bind(@NonNull View view, @Nullable Object component) {
    return (CustomerItemBinding)bind(component, view, R.layout.customer_item);
  }
}
